{"version":3,"sources":["components/styles.scss","components/tf/ScatterPlot.js","components/js/Constants.js","components/tf/Heatmap.js","components/Weights.js","components/tf/Model.js","components/js/GlobalSettings.js","components/js/Global.js","components/js/Problem.js","components/tf/Normalizer.js","components/tf/Data.js","components/jsx/TrainAndPredict.js","components/jsx/Settings.js","components/jsx/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PlotRegressionParams","predictedPointsArray","this","PlotClassificationParams","size","equalizeClassSizes","ScatterPlot","pointsArray","regressionParams","classificationParams","assert","Problem","isClassification","classKey","getLabel","plotClasses","featureName","plotRegression","values","series","Array","isArray","push","tfvis","scatterplot","name","styles","width","xLabel","yLabel","normalizedXs","normalizedYs","tf","xs","Data","denormalizeFeature","ys","denormalizeLabel","dataSync","predictedPoints","from","map","val","i","x","y","points","allSeries","forEach","p","seriesName","className","maxLength","Object","length","keys","keyName","slice","height","LossFunction","BINARY_CROSS_ENTROPY","CATEGORICAL_CROSS_ENTROPY","MEAN_SQUARED_ERROR","Constants","LOSS_NOT_SET","ProblemType","HOUSE_PRICE","WATER_FRONT","BEDROOMS","Heatmap","predictionColumns","colIndex","colInputs","rowIndex","colPredictions","Model","model","predict","valuesTensor","normalizedLabelsTensor","xTicksTensor","yTicksTensor","reverse","array","valuesPromise","xTicksPromise","yTicksPromise","xTicks","xTickLabels","l","toFixed","yTicks","yTickLabels","data","isMultiClassClassification","getClassName","heatmap","tab","domain","Weights","toWeights","fromWeights","assign","weights","dupWeights","getGlobal","problemType","reshape","plotPredictionLine","plotPredictionHeatmap","setGlobal","trainingElapsedTime","currentEpoch","minTrainingLoss","currentTrainingLoss","layers","dense","units","hiddenLayers","useBias","activation","activationFunction","inputDim","getTrainingFeatureTensor","shape","getClassNames","compile","plotPrediction","showModelDetails","undefined","create","optimizer","learningRate","loss","lossFunction","fitCallbacks","modelSummary","layer","getLayer","Promise","resolve","a","async","trainingInprogress","epochStartTime","Date","now","bestWeights","clone","onEpochEnd","callbacks","epoch","logs","copy","fit","getTrainingLabelTensor","batchSize","epochs","validationSplit","result","validationLoss","history","val_loss","pop","lossTensor","evaluate","getTestingFeatureTensor","getTestingLabelTensor","console","log","storageKey","getStorageKey","listModels","models","modelInfo","dateSaved","alert","save","saveResults","modelArtifactsInfo","sqft","price","isNaN","inputTensor","normalizedInputTensor","normalizeFeature","normalizedOutputTensor","outputTensor","outputValue","value","normalizedInput","print","predictions","score","GlobalSettings","trainingToTestingRatio","minDeltaLoss","h","Number","oldModel","o","r","split","e","b","dataSetSize","modelSaved","trainingInprogess","Global","HousePriceProblem","modelType","classNames","csvColumn","label","point","WaterFrontProblem","BedroomsProblem","Math","min","bedrooms","problem","setLossFunction","setLearningRate","filterPoint","Normalizer","tensor","_normalize","dispose","dim","mul","max","sub","add","denormalized","featureTensor","_minMaxDenormalize","normalizedTensor","firstTime","featureDimensions","features","normalizedFeatures","_minMaxNormalize","t","tensor1d","div","houseSalesDataset","csv","pointsDataset","record","sqft_living","waterfront","toArray","then","shuffle","setupProblem","featureNormalizer","labelNormalizer","el","remove","problemPoints","filter","plot","isModelSaved","featureValues","labelValues","getClassIndex","labelTensor","index","indexOf","classIndex","trainingFeatureTensor","testingFeatureTensor","trainingLabelTensor","testingLabelTensor","ratio","trainingSize","round","testingSize","getTensor","normalize","denormalize","Blue","styled","span","blue60","ButtonStyle","Button","ColumnHeading","ColumnLabel","Row","IconContainer","PlayIcon","PlayFilledAlt24","ui01","props","PauseIcon","PauseFilled24","ResetIcon","Reset24","ShuffleIcon","Shuffle24","ClassificationIcon","Classification24","TestIcon","Checkmark24","SaveIcon","DocumentExport24","LoadIcon","DocumentImport24","PredictIcon","Analytics24","TrainAndTestIcon","WatsonMachineLearning32","blue40","Predict32Icon","Analytics32","Input","TextInput","Predictions","table","PredictionData","td","Td","Hightlight","Loss","toPrecision","TrainAndPredict","state","trainingStatusCb","testingStatusCb","trainingDisabled","testingDisabled","loadDisabled","saveDisabled","predictDisabled","handlePredictPrice","bind","handleLoad","handleSave","handleTest","handleTrain","handleResetModel","handleShuffle","handleSqftChange","handlePriceChange","handleClassify","loadData","setState","Fragment","aria-label","getModelType","kind","global","onClick","disabled","id","labelText","type","onChange","style","load","disableAllButtons","open","train","trainingLoss","test","target","prediction","React","Component","Container","Heading","SelectStyle","Select","InputStyle","SliderStyle","Slider","TrainingTestingSizes","TrainingTestingSize","Iterations","Group","Settings","setActivationFunction","SelectItem","text","setHiddenLayers","setMinDeltaLoss","setOptimizer","setBatchSize","IterationCount","setTrainingToTestingRatio","iterationCount","window","TitleContainer","Title","ProblemContainer","Body","borderColor","BodyHeader","BodyHeaderItem","OpenVisorContainer","OpenVisorButton","OpenVisorIcon","OpenPanelRight24","LeftColumn","MiddleColumn","RightColumn","SettingsIcon","Settings32","Layout","handleOpenVisor","handleProblemTypeChange","float","getTrainingTime","small","setProblemType","change","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ccc01930.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"uibackground\":\"#fff\",\"borderColor\":\"#e0e0e0\",\"ui01\":\"#f4f4f4\",\"ui02\":\"#fff\",\"ui03\":\"#e0e0e0\",\"ui04\":\"#8d8d8d\",\"text01\":\"#161616\",\"text02\":\"#393939\",\"text03\":\"#a8a8a8\",\"blue40\":\"#78a9ff\",\"blue60\":\"#0f62fe\",\"red60\":\"#da1e28\"};","import {getGlobal} from 'reactn';\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport Data from './Data';\nimport { assert } from '@tensorflow/tfjs-core/dist/util';\nimport Problem, {ProblemType} from '../js/Problem';\n\n/**\n * Optional params for regression\n */\nexport class PlotRegressionParams {\n  predictedPointsArray = null;\n\n  constructor(predictedPointsArray = null) {\n    this.predictedPointsArray = predictedPointsArray;\n  }\n}\n\n/**\n * Optional params for classification\n */\nexport class PlotClassificationParams {\n  size = 400;\n  equalizeClassSizes = false;\n\n  constructor(size = 400, equalizeClassSizes) {\n    this.size = size;\n    this.equalizeClassSizes = equalizeClassSizes;\n  }\n}\n\nclass ScatterPlot {\n\n  plot (pointsArray, regressionParams = new PlotRegressionParams(), classificationParams = new PlotClassificationParams()) {\n    assert(regressionParams instanceof PlotRegressionParams, 'param 2 expected PlotRegressionParams');\n    assert(classificationParams instanceof PlotClassificationParams, 'param 3 expected PlotClassificationParams');\n\n    if(!Problem.isClassification()) {\n      const featureName = \"Square feet\";\n      return this.plotRegression(pointsArray, featureName, regressionParams.predictedPointsArray);\n    }\n    else {\n      const classKey = Problem.getLabel();\n      return this.plotClasses(pointsArray, classKey, classificationParams.size, classificationParams.equalizeClassSizes);\n    }\n  }\n\n  async plotRegression (pointsArray, featureName, predictedPointsArray = null) {\n    assert(!Problem.isClassification(), 'Problem type must be Regression');\n\n    const values = [pointsArray];\n    const series = [\"original\"];\n\n    if (Array.isArray(predictedPointsArray)) {\n      values.push(predictedPointsArray);\n      series.push(\"predicted\");\n    }\n\n    return tfvis.render.scatterplot(\n      { name: `Square feet vs House Price`,\n        styles: { width: \"100%\" }},\n      {  values, series },\n      {\n        xLabel: featureName,\n        yLabel: \"Price\",\n      }\n    );\n  }\n\n  async plotPredictionLine (normalizedXs, normalizedYs) {\n    assert(!Problem.isClassification(), 'Problem type must be Regression');\n\n    const [xs, ys] = tf.tidy(() => {\n\n      const xs = Data.denormalizeFeature(normalizedXs);\n      const ys = Data.denormalizeLabel(normalizedYs);\n\n      return [ xs.dataSync(), ys.dataSync() ];\n    });\n\n    const predictedPoints = Array.from(xs).map((val, i) => {\n      return {x: val, y: ys[i]}\n    });\n\n    await this.plotRegression(Data.points, \"Square feet\", predictedPoints);\n  }\n\n  async plotClasses (pointsArray, classKey, size = 400, equalizeClassSizes = false) {\n    assert(Problem.isClassification(), 'Problem type must be Classification');\n\n    // Add each class as a series\n    const allSeries = {};\n    pointsArray.forEach(p => {\n      // Add each point to the series for the class it is in\n      const seriesName = `${classKey}: ${p.className}`;\n      let series = allSeries[seriesName];\n      if (!series) {\n        series = [];\n        allSeries[seriesName] = series;\n      }\n      series.push(p);\n    });\n\n    if (equalizeClassSizes) {\n      // Find smallest class\n      let maxLength = null;\n      Object.values(allSeries).forEach(series => {\n        if (maxLength === null || series.length < maxLength && series.length >= 100) {\n          maxLength = series.length;\n        }\n      });\n      // Limit each class to number of elements of smallest class\n      Object.keys(allSeries).forEach(keyName => {\n        allSeries[keyName] = allSeries[keyName].slice(0, maxLength);\n        if (allSeries[keyName].length < 100) {\n          delete allSeries[keyName];\n        }\n      });\n    }\n\n    tfvis.render.scatterplot(\n      {\n        name: `Square feet vs House Price`,\n        styles: { width: \"100%\" }\n      },\n      {\n        values: Object.values(allSeries),\n        series: Object.keys(allSeries),\n      },\n      {\n        xLabel: \"Square feet\",\n        yLabel: \"Price\",\n        height: size,\n        width: size*1.5,\n      }\n    );\n  }\n}\n\nexport default ScatterPlot = new ScatterPlot();","export class LossFunction {\n  static BINARY_CROSS_ENTROPY = 'binaryCrossentropy';\n  static CATEGORICAL_CROSS_ENTROPY = 'categoricalCrossentropy';\n  static MEAN_SQUARED_ERROR = 'meanSquaredError';\n}\n\nexport default class Constants {\n  static LOSS_NOT_SET = 0x7fffffff;\n}\n\nexport class ProblemType {\n  static HOUSE_PRICE = 'House price'; // regression\n  static WATER_FRONT = 'Water front'; // binary classification\n  static BEDROOMS = 'Bedrooms'; // multi class\n}","import * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport Model from './Model';\nimport Data from './Data';\nimport Problem from '../js/Problem';\n\nclass Heatmap {\n  async plotPredictionHeatmap (name = \"Predicted class\", size = 400) {\n    const [ valuesPromise, xTicksPromise, yTicksPromise ] = tf.tidy(() => {\n      const gridSize = 50;\n      const predictionColumns = [];\n      // Heatmap order is confusing: columns first (top to bottom) then rows (left to right)\n      // We want to convert that to a standard cartesian plot so invert the y values\n      for (let colIndex = 0; colIndex < gridSize; colIndex++) {\n        // Loop for each column, starting from the left\n        const colInputs = [];\n        const x = colIndex / gridSize;\n        for (let rowIndex = 0; rowIndex < gridSize; rowIndex++) {\n          // Loop for each row, starting from the top\n          const y = (gridSize - rowIndex) / gridSize; // invert\n          colInputs.push([x, y]);\n        }\n\n        const colPredictions = Model.model.predict(tf.tensor2d(colInputs));\n        predictionColumns.push(colPredictions);\n      }\n      const valuesTensor = tf.stack(predictionColumns);\n\n      const normalizedLabelsTensor = tf.linspace(0, 1, gridSize);\n      const xTicksTensor = Data.denormalizeFeature(normalizedLabelsTensor, 0);\n      const yTicksTensor = Data.denormalizeFeature(normalizedLabelsTensor.reverse(), 1);\n\n      return [ valuesTensor.array(), xTicksTensor.array(), yTicksTensor.array() ];\n    });\n\n    const values = await valuesPromise;\n    const xTicks = await xTicksPromise;\n    const xTickLabels = xTicks.map(l => (l/1000).toFixed(1)+\"k sqft\");\n    const yTicks = await yTicksPromise;\n    const yTickLabels = yTicks.map(l => \"$\"+(l/1000).toFixed(0)+\"k\");\n\n    tf.unstack(values, 2).forEach((values, i) => {\n      const data = {\n        values,\n        xTickLabels,\n        yTickLabels,\n      };\n\n      let className = '';\n      if(Problem.isMultiClassClassification()) {\n        className = ':' + Data.getClassName(i);\n      }\n\n      // tfvis.render.heatmap({\n      //   name: `${Problem.getLabel()+className} (unscaled)`,\n      //   tab: `Heat map`\n      // }, data, { height: size });\n      tfvis.render.heatmap({\n        name: `${Problem.getLabel()+className}`,\n        tab: `Heatmap`\n      }, data, { height: size, domain: [0, 1] });\n    });\n  }\n}\n\nexport default Heatmap = new Heatmap();","import * as tf from '@tensorflow/tfjs'\n\nexport default class Weights {\n\n  static copy(toWeights, fromWeights) {\n    for(let i = 0; i < fromWeights.length; ++i) {\n      // val is an instance of tf.Variable\n      toWeights[i].val.assign(fromWeights[i].val);\n    }\n  }\n\n  static clone(weights) {\n    let dupWeights = [];\n    for(let i = 0; i < weights.length; ++i) {\n      dupWeights.push({val: tf.variable(weights[i].val, true)});\n    }\n    return dupWeights;\n  }\n\n\n}","import {setGlobal, getGlobal} from 'reactn';\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport Data from './Data';\nimport ScatterPlot from './ScatterPlot';\nimport Constants, {ProblemType} from '../js/Constants';\nimport Problem from '../js/Problem';\nimport Heatmap from './Heatmap';\nimport Weights from '../Weights';\n\nclass Model {\n\n  /**\n   * Plot orange predition line using 100 example Xs between 0 and 1, or Heatmap\n   */\n  async plotPrediction() {\n    if(getGlobal().problemType === ProblemType.HOUSE_PRICE) {\n      tf.tidy(() => {\n        const normalizedXs = tf.linspace(0, 1, 100);\n        const normalizedYs = this.model.predict(normalizedXs.reshape([100, 1]));\n        ScatterPlot.plotPredictionLine(normalizedXs, normalizedYs);\n      });\n    }\n    else {\n      await Heatmap.plotPredictionHeatmap();\n    }\n  }\n\n  /**\n   * Create new model\n   */\n  create() {\n    setGlobal({trainingElapsedTime: 0,\n                currentEpoch: 0,\n                minTrainingLoss: Constants.LOSS_NOT_SET,\n                currentTrainingLoss: Constants.LOSS_NOT_SET});\n\n    this.model = tf.sequential({\n      layers: [\n        // layer 1 (input)\n        tf.layers.dense({\n          units: getGlobal().hiddenLayers,\n          useBias: true,\n          activation: getGlobal().activationFunction,\n          inputDim: Data.getTrainingFeatureTensor().shape[1]\n        }),\n        // layer 2 (hidden)\n        tf.layers.dense({\n          units: getGlobal().hiddenLayers,\n          useBias: true,\n          activation: getGlobal().activationFunction,\n        }),\n        // layer 3 (ouptut)\n        tf.layers.dense({\n          units: Problem.isMultiClassClassification() ? Problem.getClassNames().length : 1,\n          useBias: true,\n          activation: Problem.isMultiClassClassification() ? 'softmax' : getGlobal().activationFunction,\n        })\n      ]\n    });\n\n    this.compile();\n\n    if(getGlobal().problemType === ProblemType.HOUSE_PRICE) this.plotPrediction();\n\n    this.showModelDetails();\n  }\n\n  /**\n   * Compile model - set loss and optimization functions\n   */\n  compile() {\n    if(this.model === undefined) {\n      this.create();\n    }\n    else {\n      const optimizer = tf.train[getGlobal().optimizer](getGlobal().learningRate);\n      this.model.compile({\n        loss: getGlobal().lossFunction,\n        optimizer,\n      });\n    }\n  }\n\n  fitCallbacks() {\n    return tfvis.show.fitCallbacks({ name: \"Training Optimization\" }, ['loss']);\n  }\n\n  showModelDetails() {\n    this.fitCallbacks();\n    tfvis.show.modelSummary({name: \"Model summary\"}, this.model);\n    for(let i = 0; i < this.model.layers.length; ++i) {\n      const layer = this.model.getLayer(undefined, i);\n      tfvis.show.layer({name: `Layer ${i+1}`}, layer);\n    }\n  }\n\n  /**\n   * Train model\n   * @returns promise([trainingLoss, validationLoss])\n   */\n  train() {\n\n    if(this.model === undefined) {\n      this.create();\n    }\n\n    return new Promise(async (resolve) => {\n      setGlobal({trainingInprogress: true});\n      let epochStartTime = Date.now();\n\n      let bestWeights = Weights.clone(this.model.weights);\n\n      const { onEpochEnd } = this.fitCallbacks(); // draw loss graph\n\n      let callbacks = [];\n      callbacks.push({onEpochEnd});\n      callbacks.push({\n        onEpochEnd: (epoch, logs) => {\n          if(logs.loss && logs.loss < getGlobal().minTrainingLoss) {\n            setGlobal({minTrainingLoss: logs.loss});\n            Weights.copy(bestWeights, this.model.weights);\n          }\n\n          setGlobal({currentEpoch: ++getGlobal().currentEpoch,\n            currentTrainingLoss: logs.loss,\n            trainingElapsedTime:\n              getGlobal().trainingElapsedTime + (Date.now() - epochStartTime)});\n\n          epochStartTime = Date.now();\n\n          this.plotPrediction();\n        }\n      });\n\n      let validationLoss;\n      while(getGlobal().trainingInprogress === true) {\n        const result = await this.model.fit(Data.getTrainingFeatureTensor(),\n          Data.getTrainingLabelTensor(), {\n            // initialEpoch: getGlobal().currentEpoch,\n            batchSize: getGlobal().batchSize,\n            epochs: 1,\n            validationSplit: 0.2,\n            callbacks\n          });\n\n        // console.log(result);\n        // console.log(`Training set loss: ${getGlobal().minTrainingLoss}`);\n        validationLoss = result.history.val_loss.pop();\n        // console.log(`Validation set loss: ${validationLoss}`);\n      }\n\n      this.plotPrediction();\n\n      setGlobal({trainingInprogress: false});\n      resolve([getGlobal().minTrainingLoss, validationLoss]);\n    });\n  }\n\n  /**\n   * Test model\n   * @returns promise([loss])\n   */\n  async test() {\n    return new Promise(async (resolve) => {\n      const lossTensor = this.model.evaluate(Data.getTestingFeatureTensor(), Data.getTestingLabelTensor());\n      const loss = await lossTensor.data();\n      console.log(`Testing set loss: ${loss}`);\n      resolve(loss);\n    });\n  }\n\n  /**\n   * Load saved model\n   * @returns promise(dateSaved)\n   */\n  async load() {\n    return new Promise(async (resolve) => {\n      const storageKey = Problem.getStorageKey();\n      const models = await tf.io.listModels();\n      const modelInfo = models[storageKey];\n      if (modelInfo) {\n        this.model = await tf.loadLayersModel(storageKey);\n\n        this.compile();\n\n        this.showModelDetails();\n\n        this.plotPrediction();\n\n        resolve(modelInfo.dateSaved);\n      }\n      else {\n        alert(\"Could not load: no saved model found\");\n      }\n    });\n  }\n\n  /**\n   * Save model\n   * @returns promise(dateSaved)\n   */\n  async save() {\n    return new Promise(async (resolve) => {\n      const storageKey = Problem.getStorageKey();\n      const saveResults = await this.model.save(storageKey);\n      resolve(saveResults.modelArtifactsInfo.dateSaved);\n    })\n  }\n\n  /**\n   * Is the model saved for the selected problem?\n   * @returns promise(boolean) - true, if the model is saved for the selected problem\n   */\n  isModelSaved() {\n    return new Promise(async resolve => {\n      const storageKey = Problem.getStorageKey();\n      const models = await tf.io.listModels();\n      resolve(models[storageKey] !== undefined);\n    });\n  }\n\n  /**\n   * Predict house price\n   * @param {*} sqft - sqft\n   * @returns promise(price)\n   */\n  async predict(sqft, price) {\n    return new Promise(async (resolve) => {\n      if (sqft === undefined || sqft.length === 0 || isNaN(sqft)) {\n        alert(\"Please enter a valid number instead of \"+sqft);\n        resolve(undefined);\n      }\n      else {\n        if(getGlobal().problemType === ProblemType.HOUSE_PRICE) {\n          tf.tidy(async () => {\n            const inputTensor = tf.tensor1d([sqft],'int32');\n            const normalizedInputTensor = Data.normalizeFeature(inputTensor);\n            const normalizedOutputTensor = this.model.predict(normalizedInputTensor);\n            const outputTensor = Data.denormalizeLabel(normalizedOutputTensor);\n            const outputValue = await outputTensor.data();\n            const prediction = `The estimated price is $${(outputValue[0]/1000).toFixed(0)*1000}`;\n            resolve({name: 'Price', value: `$${(outputValue[0]/1000).toFixed(0)*1000}`});\n          });\n        }\n        else {\n          if (price === undefined || price.length === 0 || isNaN(price)) {\n            alert(\"Please enter a valid number instead of \"+price);\n            resolve(undefined);\n          }\n          else {\n            tf.tidy(() => {\n              const inputTensor = tf.tensor2d([[sqft, price]]);\n              const normalizedInput = Data.normalizeFeature(inputTensor);\n              const normalizedOutputTensor = this.model.predict(normalizedInput);\n              normalizedOutputTensor.print();\n              const outputTensor = Data.denormalizeLabel(normalizedOutputTensor);\n              const outputValue = outputTensor.dataSync();\n              let predictions = [];\n              outputValue.forEach((score,i) => {\n                const className = Problem.isMultiClassClassification() ? Data.getClassName(i) : '';\n                predictions.push({name: `${className} ${Problem.getLabel()}`,\n                                  value: `${(score*100).toFixed(1)}%`});\n              });\n              resolve(predictions);\n            });\n          }\n        }\n      }\n    });\n  }\n}\n\nexport default Model = new Model();","import {setGlobal, getGlobal} from 'reactn';\nimport Model from '../tf/Model';\nimport Data from '../tf/Data';\nimport Weights from '../Weights';\nimport {ProblemType} from './Constants';\n\nexport default class GlobalSettings {\n  constructor() {\n    setGlobal({\n      problemType: ProblemType.HOUSE_PRICE,\n      hiddenLayers: 10,\n      activationFunction: 'sigmoid',\n      lossFunction: 'meanSquaredError',\n      optimizer: 'adam',\n      learningRate: 0.05,\n      trainingToTestingRatio: 50,\n      minDeltaLoss: 0,\n      batchSize: 32\n    });\n  }\n\n  setHiddenLayers(h) {\n    setGlobal({hiddenLayers: Number(h)});\n    if(getGlobal().hiddenLayers !== h && h  > 0) {\n      Model.create();\n    }\n  }\n\n  setActivationFunction(a) {\n    if(getGlobal().activationFunction !== a) {\n      setGlobal({activationFunction: a});\n      const oldModel = Model.model;\n      Model.create();\n      if(oldModel !== undefined) {\n        Weights.copy(Model.model.weights, oldModel.model.weights);\n      }\n    }\n  }\n\n  setLossFunction(l) {\n    if(getGlobal().lossFunction !== l) {\n      setGlobal({lossFunction: l});\n      Model.compile();\n    }\n  }\n\n  setOptimizer(o) {\n    if(getGlobal().optimizer !== o) {\n      setGlobal({optimizer: o});\n      Model.compile();\n    }\n  }\n\n  setLearningRate(r) {\n    setGlobal({learningRate: r});\n    if(getGlobal().learningRate !== r && r > 0) {\n      Model.compile();\n    }\n  }\n\n  setTrainingToTestingRatio(r) {\n    setGlobal({trainingToTestingRatio: Number(r)});\n    Data.split(r);\n  }\n\n  setMinDeltaLoss(e) {\n    setGlobal({minDeltaLoss: Number(e)});\n  }\n\n  setBatchSize(b) {\n    setGlobal({batchSize: Number(b)});\n  }\n}","import {setGlobal} from 'reactn';\nimport GlobalSettings from './GlobalSettings';\nimport Constants, {ProblemType} from './Constants';\n\nsetGlobal({\n  problemType: ProblemType.HOUSE_PRICE,\n  dataSetSize: 0,\n  modelSaved: false,\n  trainingElapsedTime: 0,\n  currentEpoch: 0,\n  minTrainingLoss: Constants.LOSS_NOT_SET,\n  currentTrainingLoss: Constants.LOSS_NOT_SET,\n  trainingInprogess: false,\n});\n\nclass Global extends GlobalSettings {\n  constructor() {\n    super();\n  }\n\n  setProblemType(p) {\n    setGlobal({problemType: p});\n  }\n}\n\nexport default Global = new Global();","import { assert } from '@tensorflow/tfjs-core/dist/util';\nimport Global from './Global';\nimport {LossFunction, ProblemType} from './Constants';\n\nclass HousePriceProblem {\n  modelType = 'Regression';\n  storageKey = 'localstorage://house_price_model';\n  classNames = [];\n  csvColumn = undefined;\n  label = 'Price';\n\n  filterPoint(point) {return true;}\n}\n\nclass WaterFrontProblem {\n  modelType = 'Binary Classification';\n  storageKey = 'localstorage://water_front_model';\n  classNames = ['0','1'];\n  csvColumn = 'waterfront';\n  label = 'Water front';\n\n  getClassName(value) {return this.classNames[value];}\n\n  filterPoint(point) {return true;}\n}\n\nclass BedroomsProblem {\n  modelType = 'Multiclass Classification';\n  storageKey = 'localstorage://bedrooms_model';\n  classNames = ['1', '2', '3+'];\n  csvColumn = 'bedrooms';\n  label='Bedrooms';\n\n  getClassName(value) {\n    value = Math.min(value, this.classNames.length);\n    return this.classNames[value-1];\n  }\n\n  filterPoint(point) {return point.bedrooms > 0;}\n}\n\nclass Problem {\n  constructor() {\n    this.problem = new HousePriceProblem();\n  }\n\n  change(problemType) {\n    switch(problemType) {\n      case ProblemType.HOUSE_PRICE:\n        this.problem = new HousePriceProblem();\n        Global.setLossFunction(LossFunction.MEAN_SQUARED_ERROR);\n        Global.setLearningRate(0.5);\n        break;\n      case ProblemType.WATER_FRONT:\n        this.problem = new WaterFrontProblem();\n        Global.setLossFunction(LossFunction.BINARY_CROSS_ENTROPY);\n        Global.setLearningRate(0.01);\n        break;\n      case ProblemType.BEDROOMS:\n        this.problem = new BedroomsProblem();\n        Global.setLossFunction(LossFunction.CATEGORICAL_CROSS_ENTROPY);\n        Global.setLearningRate(0.01);\n        break;\n      default:\n        assert('unknown problem type', problemType);\n        break;\n    }\n  }\n\n  getModelType() {\n    return this.problem.modelType;\n  }\n\n  filterPoint(point) {\n    return this.problem.filterPoint(point);\n  }\n\n  isClassification() {\n    return this.problem.classNames.length > 0;\n  }\n\n  isBinaryClassification() {\n    return this.problem.classNames.length === 2;\n  }\n\n  isMultiClassClassification() {\n    return this.problem.classNames.length > 2;\n  }\n\n  getStorageKey() {\n    return this.problem.storageKey;\n  }\n\n  getClassNames() {\n    return this.problem.classNames;\n  }\n\n  getClassName(point) {\n    const value = point[this.problem.csvColumn];\n    return this.problem.getClassName(value);\n  }\n\n  getCsvColumn() {\n    return this.problem.csvColumn;\n  }\n\n  getLabel() {\n    return this.problem.label;\n  }\n}\n\nexport default Problem = new Problem();","import * as tf from '@tensorflow/tfjs';\nimport { assert } from '@tensorflow/tfjs-core/dist/util';\n\nexport default class Normalizer {\n\n  constructor(tensor) {\n    this.tensor = this._normalize(tensor);\n  }\n\n  /**\n   * Get the normalized tensor.\n   * @returns tensor\n   */\n  getTensor() {\n    return this.tensor;\n  }\n\n  /**\n   * Dispose normalized tensor\n   */\n  dispose() {\n    this.tensor.dispose();\n  }\n\n  /**\n   * Normalize data\n   * @param {tf.tensor} tensor\n   * @returns tensor\n   */\n  normalize (tensor) {\n    return this._normalize(tensor);\n  }\n\n  /**\n   * Denormalize tensor\n   * @param {tf.tensor} tensor\n   * @param {number} optional dimension to denormalize\n   */\n  denormalize(tensor, dim) {\n    if(dim !== undefined) {\n      const denormalizedTensor = tensor.mul(this.max[dim].sub(this.min[dim])).add(this.min[dim]);\n      return denormalizedTensor;\n    }\n    else if (this.min.length > 1) {\n      // More than one feature\n      // Split into separate tensors\n      const features = tf.split(tensor, this.min.length, 1);\n\n      // Denormalize\n      const denormalized = features.map((featureTensor, i) => this._minMaxDenormalize(featureTensor, this.min[i], this.max[i]));\n\n      const returnTensor = tf.concat(denormalized, 1);\n      return returnTensor;\n    }\n    else {\n      const denormalizedTensor = this._minMaxDenormalize(tensor, this.min[0], this.max[0]);\n      return denormalizedTensor;\n    }\n  }\n\n  _normalize(tensor) {\n    tensor.print();\n    const firstTime = this.min === undefined;\n    if(firstTime) {\n      this.min = [];\n      this.max = [];\n    }\n    let normalizedTensor;\n\n    const featureDimensions = tensor.shape.length > 1 && tensor.shape[1];\n    // More than one feature?\n    if (featureDimensions && featureDimensions > 1) {\n      if(firstTime) {\n        this.min.length = featureDimensions;\n        this.max.length = featureDimensions;\n      }\n\n      // Split into separate 1d tensors\n      const features = tf.split(tensor, featureDimensions, 1);\n\n      // Normalize and find min/max values for each feature\n      const normalizedFeatures = features.map((featureTensor, i) => {\n        if(firstTime) {\n          this.min[i] = featureTensor.min();\n          this.max[i] = featureTensor.max();\n        }\n        return this._minMaxNormalize(featureTensor, this.min[i], this.max[i]);\n      });\n\n      features.forEach(t => t.dispose());\n\n      normalizedTensor = tf.concat(normalizedFeatures, 1);\n    }\n    else {\n      if(firstTime) {\n        this.min.push(tensor.min());\n        this.max.push(tensor.max());\n      }\n      normalizedTensor = this._minMaxNormalize(tensor, this.min[0], this.max[0]);\n    }\n    return normalizedTensor;\n  }\n\n  // min/max normailization\n  _minMaxNormalize(tensor1d, min, max) {\n    return tensor1d.sub(min).div(max.sub(min));\n  }\n\n  // min/max denormalization\n  _minMaxDenormalize(tensor1d, min, max) {\n    return tensor1d.mul(max.sub(min)).add(min);\n  }\n\n}","import {setGlobal, getGlobal} from 'reactn';\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport Problem from '../js/Problem';\nimport Model from './Model';\nimport ScatterPlot from './ScatterPlot';\nimport Normalizer from './Normalizer';\nimport { assert } from '@tensorflow/tfjs-core/dist/util';\n\nclass Data {\n\n  async load() {\n    // Import from CSV\n    const houseSalesDataset = tf.data.csv('./kc_house_data.csv');\n\n    // Extract x and y values to plot\n    const pointsDataset = houseSalesDataset.map(record => ({\n      x: record.sqft_living,\n      y: record.price,\n      className: undefined,\n      waterfront: record.waterfront,\n      bedrooms: record.bedrooms\n    }));\n\n    return pointsDataset.toArray()\n    .then((points) => {\n      this.points = points;\n      this.shuffle();\n      return this.points;\n    })\n  }\n\n  /**\n   * Shuffle data\n   */\n  shuffle() {\n    tf.util.shuffle(this.points);\n    this.setupProblem();\n  }\n\n  /**\n   * Do data setup for the selected problem\n   */\n  async setupProblem() {\n    // Clear up tensors for previous problem\n    if(this.featureNormalizer) this.featureNormalizer.dispose();\n    if(this.labelNormalizer) this.labelNormalizer.dispose();\n\n    tfvis.visor().el.remove();\n\n    // Filter the points (if required) for the select problem\n    this.problemPoints = this.points.filter(point => Problem.filterPoint(point));\n\n    ScatterPlot.plot(this.problemPoints);\n\n    setGlobal({dataSetSize: this.problemPoints.length});\n\n    // Update modelSaved boolean for the selected problem\n    const modelSaved = await Model.isModelSaved();\n    setGlobal({modelSaved});\n\n    // Problem has classes defined?\n    if(Problem.isClassification()) {\n      this.problemPoints.forEach((p) => {\n        p.className = Problem.getClassName(p);\n      });\n    }\n\n    // Extract Features (inputs)\n    // For classification, x,y (sqft,price) are feature, otherwise only sqft is a feature\n    const featureValues = this.problemPoints.map(p => !Problem.isClassification() ? p.x : [p.x, p.y]);\n    const featureTensor = tf.tensor2d(featureValues, !Problem.isClassification() ? [featureValues.length, 1] : undefined);\n\n    // Extract Labels (outputs)\n    // For classification, each class is a label, otherwise the price is the only label\n    const labelValues = this.problemPoints.map(p => !Problem.isClassification() ? p.y : this.getClassIndex(p.className));\n    // Use one hot encoding if there are more than 2 classes\n    const labelTensor = Problem.isMultiClassClassification() ?\n            tf.tidy(() => tf.oneHot(tf.tensor1d(labelValues, 'int32'), Problem.getClassNames().length))\n            :\n            tf.tensor2d(labelValues, [labelValues.length, 1]);\n    labelTensor.print();\n\n    // Normalise features and labels\n    this.featureNormalizer = new Normalizer(featureTensor);\n    this.labelNormalizer = new Normalizer(labelTensor);\n\n    featureTensor.dispose();\n    labelTensor.dispose();\n\n    // Default to 50% training to testing ratio\n    this.split(getGlobal().trainingToTestingRatio);\n\n    // Create new model and plot data\n    Model.create();\n    ScatterPlot.plot(this.problemPoints);\n  }\n\n  getClassIndex(className) {\n    const index = Problem.getClassNames().indexOf(className);\n    assert(index !== -1, `getClassIndex: ${index} className ${className} not found: ${Problem.getClassNames()} `);\n    return index;\n  }\n\n  getClassName(classIndex) {\n    assert(classIndex < Problem.getClassNames().length, `getClassName: classIndex ${classIndex} too big: ${Problem.getClassNames()}`);\n    return Problem.getClassNames()[classIndex];\n  }\n\n  getTrainingFeatureTensor() {\n    return this.trainingFeatureTensor;\n  }\n\n  getTestingFeatureTensor() {\n    return this.testingFeatureTensor;\n  }\n\n  getTrainingLabelTensor() {\n    return this.trainingLabelTensor;\n  }\n\n  getTestingLabelTensor() {\n    return this.testingLabelTensor;\n  }\n\n  dispose(tensor) {\n    if(tensor !== undefined) {\n      tensor.dispose();\n    }\n  }\n\n  split(ratio) {\n    this.dispose(this.trainingFeatureTensor);\n    this.dispose(this.testingFeatureTensor);\n    this.dispose(this.trainingLabelTensor);\n    this.dispose(this.testingLabelTensor);\n\n    const trainingSize = Math.round(this.problemPoints.length/(100/ratio));\n    const testingSize = this.problemPoints.length - trainingSize;\n\n    const [trainingFeatureTensor, testingFeatureTensor] = tf.split(this.featureNormalizer.getTensor(),\n                                                                    [trainingSize, testingSize]);\n    const [trainingLabelTensor, testingLabelTensor] = tf.split(this.labelNormalizer.getTensor(),\n                                                                [trainingSize, testingSize]);\n\n    this.trainingFeatureTensor = trainingFeatureTensor;\n    this.testingFeatureTensor = testingFeatureTensor;\n    this.trainingLabelTensor = trainingLabelTensor;\n    this.testingLabelTensor = testingLabelTensor;\n  }\n\n  normalizeFeature(tensor) {\n    return this.featureNormalizer.normalize(tensor);\n  }\n\n  /**\n   * Denormalize\n   * @param {tf.tensor} tensor\n   * @param {number} dim - optional dimension to denormalize\n   */\n  denormalizeFeature(tensor, dim) {\n    return this.featureNormalizer.denormalize(tensor, dim);\n  }\n\n  denormalizeLabel(tensor) {\n    return this.labelNormalizer.denormalize(tensor);\n  }\n}\n\nexport default Data = new Data();","import React from 'reactn';\nimport styled from 'styled-components';\nimport styles from '../styles.scss';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport { Checkmark24, Classification24, PlayFilledAlt24, PauseFilled24, Reset24, Shuffle24, DocumentExport24, DocumentImport24  } from '@carbon/icons-react';\nimport { WatsonMachineLearning32, Analytics32, Analytics24 } from '@carbon/icons-react';\nimport { Button, TextInput } from 'carbon-components-react';\nimport Data from '../tf/Data';\nimport Model from '../tf/Model';\nimport Constants, {ProblemType} from '../js/Constants';\nimport Problem from '../js/Problem';\n\nconst Blue = styled.span`\n  color: ${styles.blue60};\n`\nconst ButtonStyle = styled(Button)`\n  margin-right: 5px;\n  white-space: nowrap;\n`\nconst ColumnHeading = styled.div`\n  display: flex;\n  padding: 16px 0;\n  /* text-align: center; */\n`\nconst ColumnLabel = styled.div`\n  font-size: x-large;\n  padding-top: 8px;\n  color: ${styles.blue60};\n  margin-left: 5px;\n`\nconst Row = styled.div`\n  padding-bottom: 16px;\n`\nconst IconContainer = styled.div`\n  position: absolute;\n  right: 0;\n  padding-right: 8px;\n`\nconst PlayIcon = styled(PlayFilledAlt24)`\n  stroke: ${styles.ui01};\n  fill: ${styles.ui01};\n  display: ${props => props.trainingInprogress ? 'none' : undefined};\n`\nconst PauseIcon = styled(PauseFilled24)`\n  stroke: ${styles.ui01};\n  fill: ${styles.ui01};\n  display: ${props => props.trainingInprogress ? undefined : 'none'};\n`\nconst ResetIcon = styled(Reset24)`\n  stroke: ${styles.ui01};\n  fill: ${styles.ui01};\n`\nconst ShuffleIcon = styled(Shuffle24)`\n  stroke: ${styles.ui01};\n  fill: ${styles.ui01};\n`\nconst ClassificationIcon = styled(Classification24)`\n  stroke: ${styles.ui01};\n  fill: ${styles.ui01};\n`\nconst TestIcon = styled(Checkmark24)`\n  stroke: ${styles.ui01};\n  fill: ${styles.ui01};\n`\nconst SaveIcon = styled(DocumentExport24)`\n  stroke: ${styles.ui01};\n  fill: ${styles.ui01};\n`\nconst LoadIcon = styled(DocumentImport24)`\n  stroke: ${styles.ui01};\n  fill: ${styles.ui01};\n`\nconst PredictIcon = styled(Analytics24)`\n  stroke: ${styles.ui01};\n  fill: ${styles.ui01};\n`\nconst TrainAndTestIcon = styled(WatsonMachineLearning32)`\n  fill: ${styles.blue40};\n  stroke-width: 2px;\n  stroke: ${styles.blue60};\n`\nconst Predict32Icon = styled(Analytics32)`\n  fill: ${styles.blue40};\n  stroke-width: 2px;\n  stroke: ${styles.blue60};\n`\nconst Input = styled(TextInput)`\n  width: 16ch;\n`\nconst Predictions = styled.table`\n  margin-top: 16px;\n\n`\nconst PredictionData = styled.td`\n  font-size: x-large;\n  color: ${styles.blue60};\n  padding-right: 1ch;\n  text-align: right;\n`\nconst Td = styled.td`\n  width: 170px;\n  padding: 5px;\n`\nconst Hightlight = styled.span`\n  background: ${styles.ui01};\n  border-radius: 15px;\n  padding: 0 5px;\n`\nfunction Loss({loss}) {\n  return <Hightlight>{loss === Constants.LOSS_NOT_SET ? 'not set' : loss.toPrecision(5)}</Hightlight>\n}\n\nexport default class TrainAndPredict extends React.Component {\n  state = {\n    trainingStatusCb: () => <Blue>Loading data</Blue>,\n    testingStatusCb: () => <Blue>Not yet tested</Blue>,\n    trainingDisabled: true,\n    testingDisabled: true,\n    loadDisabled: true,\n    saveDisabled: true,\n    predictDisabled: true,\n    sqft: 2500,\n    price: 600000,\n    predictions: [],\n  }\n\n  constructor() {\n    super();\n        this.handlePredictPrice = this.handlePredictPrice.bind(this);\n    this.handleLoad = this.handleLoad.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.handleTest = this.handleTest.bind(this);\n    this.handleTrain = this.handleTrain.bind(this);\n    this.handleResetModel = this.handleResetModel.bind(this);\n    this.handleShuffle = this.handleShuffle.bind(this);\n    this.handleSqftChange = this.handleSqftChange.bind(this);\n    this.handlePriceChange = this.handlePriceChange.bind(this);\n    this.handleClassify = this.handleClassify.bind(this);\n\n    this.loadData().then((points) => {\n\n      this.setState({\n        trainingStatusCb: () => <Blue>Not trained</Blue>,\n        loadDisabled: false,\n        trainingDisabled: false});\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <ColumnHeading>\n          <TrainAndTestIcon aria-label={`Train ${Problem.getModelType()}`}></TrainAndTestIcon>\n          <ColumnLabel>{`Train - ${Problem.getModelType()}`}</ColumnLabel>\n        </ColumnHeading>\n        <Row>\n          Training status: {this.state.trainingStatusCb()}\n        </Row>\n        <Row>\n          Testing status: {this.state.testingStatusCb()}\n        </Row>\n        <Row>\n          <ButtonStyle kind={this.global.trainingInprogress ? 'danger' : 'primary'} onClick={this.handleTrain} disabled={this.state.trainingDisabled}>\n            Train Model\n            <IconContainer>\n              <PlayIcon aria-label=\"Start training\" trainingInprogress={this.global.trainingInprogress}/>\n              <PauseIcon aria-label=\"Resume training\" trainingInprogress={this.global.trainingInprogress}/>\n            </IconContainer>\n          </ButtonStyle>\n          <ButtonStyle kind=\"primary\" onClick={this.handleTest} disabled={this.state.testingDisabled}>\n            Test Model\n            <IconContainer>\n              <TestIcon aria-label=\"Test Model\"/>\n            </IconContainer>\n          </ButtonStyle>\n        </Row>\n        <Row>\n          <ButtonStyle kind=\"primary\" onClick={this.handleLoad}  disabled={this.state.loadDisabled  || !this.global.modelSaved}>\n            Load Model\n            <IconContainer>\n              <LoadIcon aria-label=\"Load Model\"/>\n            </IconContainer>\n          </ButtonStyle>\n          <ButtonStyle kind=\"primary\" onClick={this.handleSave} disabled={this.state.saveDisabled}>\n            Save Model\n            <IconContainer>\n              <SaveIcon aria-label=\"Save Model\"/>\n            </IconContainer>\n          </ButtonStyle>\n        </Row>\n        <Row>\n          <ButtonStyle kind=\"secondary\" onClick={this.handleResetModel} disabled={this.state.testingDisabled}>\n            Reset Model\n            <IconContainer>\n              <ResetIcon aria-label=\"Reset model weights\"/>\n            </IconContainer>\n          </ButtonStyle>\n          <ButtonStyle kind=\"secondary\" onClick={this.handleShuffle} disabled={this.global.trainingInprogress}>\n            Shuffle Data\n            <IconContainer>\n              <ShuffleIcon aria-label=\"Shuffle data\"/>\n            </IconContainer>\n          </ButtonStyle>\n        </Row>\n        <ColumnHeading>\n          <Predict32Icon aria-label=\"Predict\"></Predict32Icon>\n          <ColumnLabel>Predict</ColumnLabel>\n        </ColumnHeading>\n        <Row>\n          <table>\n            <tbody>\n            <tr>\n              <Td>\n                <Input id=\"sqft-input\" labelText=\"Square feet\" value={this.state.sqft} type=\"number\" onChange={this.handleSqftChange}/>\n              </Td>\n              <Td>\n                <Input id=\"price-input\" labelText=\"Price\" disabled={this.global.problemType === ProblemType.HOUSE_PRICE} value={this.state.price} type=\"number\" onChange={this.handlePriceChange}/>\n              </Td>\n            </tr>\n            <tr>\n              <Td>\n                <ButtonStyle kind=\"primary\" onClick={this.handlePredictPrice}\n                      disabled={this.state.predictDisabled || this.global.problemType !== ProblemType.HOUSE_PRICE}\n                      style={{width: '100%'}}>\n                  Predict Price\n                  <IconContainer>\n                    <PredictIcon aria-label=\"Predict price\"/>\n                  </IconContainer>\n                </ButtonStyle>\n              </Td>\n              <Td>\n                <ButtonStyle kind=\"primary\" onClick={this.handleClassify}\n                  disabled={this.state.predictDisabled || this.global.problemType === ProblemType.HOUSE_PRICE}\n                  style={{width: '100%'}}>\n                  Predict Class\n                  <IconContainer>\n                    <ClassificationIcon aria-label=\"Predict Class\"/>\n                  </IconContainer>\n                </ButtonStyle>\n              </Td>\n            </tr>\n            </tbody>\n          </table>\n          <Predictions>\n            <tbody>\n            {this.state.predictions.map(p => (\n              <tr>\n                  <PredictionData>{p.name}</PredictionData>\n                  <PredictionData>{p.value}</PredictionData>\n              </tr>\n            ))}\n            </tbody>\n          </Predictions>\n        </Row>\n      </React.Fragment>\n    );\n  }\n\n  loadData() {\n    return Data.load();\n  }\n\n  handleResetModel() {\n    Model.create();\n  }\n\n  handleShuffle() {\n    Data.shuffle();\n  }\n\n  async handleTrain() {\n    // Pause?\n    if(this.global.trainingInprogress) {\n      this.setGlobal({trainingInprogress: false});\n      return;\n    }\n\n    this.disableAllButtons();\n    this.setState({\n      trainingDisabled: false,\n      predictDisabled: false,\n      trainingStatusCb: () => <Blue>Training in progress</Blue>\n    });\n    tfvis.visor().open();\n    this.trainingInprogress = true;\n    const [trainingLoss, validationLoss] = await Model.train();\n    this.trainingInprogress = false;\n    this.setState({\n      testingDisabled: false,\n      saveDisabled: false,\n      predictDisabled: false,\n      trainingStatusCb: () => (\n        <Blue>\n          Loss: <Loss loss={trainingLoss}/> Validation loss: <Loss loss={validationLoss}/>\n        </Blue>),\n      testingStatusCb: () => <Blue>Not yet tested</Blue>,\n    });\n  }\n\n  async handleTest() {\n    this.disableAllButtons();\n    this.setState({\n      testingStatusCb: () => <Blue>Testing in progress</Blue>\n    });\n    const loss = await Model.test();\n    this.setState({\n      trainingDisabled: false,\n      saveDisabled: false,\n      predictDisabled: false,\n      testingStatusCb: () => (\n        <Blue>\n          Testing set loss: <Loss loss={Number(loss)}/>\n        </Blue>\n      )\n    });\n  }\n\n  async handleLoad() {\n    this.disableAllButtons();\n    const dateSaved = await Model.load();\n    this.setState({\n      trainingStatusCb: () => <Blue>{`Loaded ${dateSaved}`}</Blue>,\n      predictDisabled: false,\n      trainingDisabled: false,\n      loadDisabled: true,\n      testingDisabled: true,\n    });\n  }\n\n  async handleSave() {\n    const dateSaved = await Model.save();\n    this.setState({\n      saveDisabled: true,\n      loadDisabled: false,\n    })\n    this.setGlobal({modelSaved: true});\n  }\n\n  handleSqftChange(e) {\n    this.setState({sqft: Number(e.target.value)});\n  }\n\n  handlePriceChange(e) {\n    this.setState({price: Number(e.target.value)});\n  }\n\n  async handlePredictPrice() {\n    const prediction = await Model.predict(this.state.sqft);\n    if(prediction) {\n      this.setState({\n        predictions: [prediction]\n      });\n    }\n  }\n\n  async handleClassify() {\n    const predictions = await Model.predict(this.state.sqft, this.state.price);\n    if(predictions) {\n      this.setState({\n        predictions\n      });\n    }\n  }\n\n  disableAllButtons() {\n    this.setState({\n      trainingDisabled: true,\n      testingDisabled: true,\n      saveDisabled: true,\n      loadDisabled: true,\n      predictDisabled: true\n    });\n  }\n}","import React from 'reactn';\nimport styled from 'styled-components';\nimport styles from '../styles.scss';\nimport { Select, SelectItem, Slider, TextInput } from 'carbon-components-react';\nimport Data from '../tf/Data';\nimport Global from '../js/Global';\nimport {LossFunction} from '../js/Constants';\n\nconst Container = styled.div`\n  pointer-events: ${props => props.trainingInprogress ? 'none' : undefined};\n`\nconst Heading = styled.div`\n  color: ${styles.blue60};\n  margin: 5px 0;\n  font-size: large;\n`\nconst SelectStyle = styled(Select)`\n  margin-bottom: 5px;\n`\nconst InputStyle = styled(TextInput)`\n  width: 14vw;\n  margin-bottom: 5px;\n`\nconst SliderStyle = styled(Slider)`\n  margin-bottom: 5px;\n`\nconst TrainingTestingSizes = styled.div`\n  margin-bottom: 5px;\n`\nconst TrainingTestingSize = styled.span`\n  margin-left: 16px;\n`\nconst Iterations = styled.div`\n  text-align: center;\n  margin-bottom: 5px;\n  width: 50%;\n`\nconst Group = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 16px;\n`\nconst Input = ({type, label, min, max, value, onChange}) => (\n  <InputStyle id={\"input-\"+value} labelText={label} min={min} max={max} value={value} type={type} onChange={onChange}/>);\n\nexport default class Settings extends React.Component {\n  render() {\n    return (\n      <Container trainingInprogress={this.global.trainingInprogress}>\n        {/* Creating model */}\n        <Heading>Neural network model:</Heading>\n        <Group>\n          <SelectStyle id=\"select-activation\" labelText=\"Activation function:\"\n            value={this.global.activationFunction}\n            onChange={(e)=> {Global.setActivationFunction(e.target.value)}}>\n            <SelectItem text={'Linear'} value={'linear'}/>\n            <SelectItem text={'Relu'} value={'relu'}/>\n            <SelectItem text={'Sigmoid'} value={'sigmoid'}/>\n            <SelectItem text={'Tanh'} value={'tanh'}/>\n          </SelectStyle>\n          <Input label=\"Hidden layers:\" min={1} max={100} value={this.global.hiddenLayers} type=\"number\"\n            onChange={(e)=> {Global.setHiddenLayers(e.target.value);}}/>\n        </Group>\n        {/* Training model */}\n        <Heading>Training parameters:</Heading>\n        <Group>\n          <SelectStyle id=\"select-loss\" labelText=\"Loss function:\"\n            value={this.global.lossFunction}\n            onChange={(e)=> {Global.setLossFunction(e.target.value);}}>\n            <SelectItem text={'BinaryCrossentropy'} value={LossFunction.BINARY_CROSS_ENTROPY}/>\n            <SelectItem text={'CategoricalCrossentropy'} value={LossFunction.CATEGORICAL_CROSS_ENTROPY}/>\n            <SelectItem text={'MeanSquaredError'} value={LossFunction.MEAN_SQUARED_ERROR}/>\n          </SelectStyle>\n          <Input label=\"Train while min delta loss is:\" min={0} value={this.global.minDeltaLoss} type=\"number\"\n              onChange={(e)=> {if(e.target.value > 0) Global.setMinDeltaLoss(e.target.value);}}/>\n        </Group>\n        <Group>\n          <SelectStyle id=\"select-optimizer\" labelText=\"Optimizer:\"\n            value={this.global.optimizer}\n            onChange={(e)=> {Global.setOptimizer(e.target.value);}}>\n            <SelectItem text={'Adam'} value={'adam'}/>\n            <SelectItem text={'Stochastic Gradient Descent'} value={'sgd'}/>\n            <SelectItem text={'Adagrad'} value={'adagrad'}/>\n            <SelectItem text={'Adadelta'} value={'adadelta'}/>\n            <SelectItem text={'Adamax'} value={'adamax'}/>\n            <SelectItem text={'RMSprop'} value={'rmsprop'}/>\n          </SelectStyle>\n          <Input label=\"Learning rate:\" min={.001} max={2} value={this.global.learningRate} type=\"number\"\n            onChange={(e)=> {Global.setLearningRate(e.target.value);}}/>\n        </Group>\n        <Group>\n          <Input label=\"Batch size:\" min={1} value={this.global.batchSize} type=\"number\"\n            onChange={(e)=> {Global.setBatchSize(e.target.value);}}/>\n        </Group>\n        <this.IterationCount dataSetSize={this.global.dataSetSize}\n                              ratio={this.global.trainingToTestingRatio}\n                              batchSize={this.global.batchSize}/>\n        {/* Data */}\n        <Group>\n          <SliderStyle labelText=\"Ratio of training to test data:\" min={1} max={99} value={this.global.trainingToTestingRatio}\n            onChange={(e)=> {Global.setTrainingToTestingRatio(e.value);}}/>\n        </Group>\n        <this.TrainingTestingSizes dataSetSize={this.global.dataSetSize} ratio={this.global.trainingToTestingRatio}/>\n      </Container>\n    );\n  }\n\n  IterationCount({dataSetSize,ratio,batchSize}) {\n    const trainingSize = Math.round(dataSetSize/(100/ratio));\n    const iterationCount = trainingSize/batchSize;\n    return (\n      <Iterations>Iteratations per epoch: {Math.round(iterationCount)}</Iterations>\n    );\n  }\n\n  TrainingTestingSizes({dataSetSize, ratio}) {\n    const trainingSize = Math.round(dataSetSize/(100/ratio));\n    const testingSize = dataSetSize - trainingSize;\n    return (\n      <TrainingTestingSizes>\n        <TrainingTestingSize>Training size: {trainingSize}</TrainingTestingSize>\n        <TrainingTestingSize>Testing size: {testingSize}</TrainingTestingSize>\n      </TrainingTestingSizes>\n    );\n  }\n}","import React from 'reactn';\nimport styled from 'styled-components';\nimport styles from '../styles.scss';\nimport { Button, Select, SelectItem } from 'carbon-components-react';\nimport { OpenPanelRight24  } from '@carbon/icons-react';\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport { Settings32 } from '@carbon/icons-react';\nimport TrainAndPredict from './TrainAndPredict';\nimport Settings from './Settings';\nimport Constants from '../js/Constants';\nimport Global from '../js/Global';\nimport Data from '../tf/Data';\nimport Problem from '../js/Problem';\nimport {ProblemType} from '../js/Constants';\n\nwindow.tf = tf; // make tf global so it can be referenced in the browser console\n\nconst headerHeight = '100px';\nconst outerBorder = '32px';\nconst innerBorder = '16px';\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n  padding: ${outerBorder} ${outerBorder};\n`\nconst TitleContainer = styled.div`\n  height: ${headerHeight};\n`\nconst Title = styled.div`\n  font-size: xx-large;\n  font-weight: bold;\n`\nconst ProblemContainer = styled(Select)`\n  color: ${styles.blue60};\n`\nconst Body = styled.div`\n  padding: ${innerBorder} ${innerBorder};\n  background: ${styles.borderColor};\n  height: calc(100vh - ${headerHeight} - ${outerBorder} - ${outerBorder});\n  overflow-y: auto;\n`\nconst BodyHeader = styled.div`\n  height: 40px;\n`\nconst BodyHeaderItem = styled.div`\n  float: left;\n  margin-right: 16px;\n  font-size: x-large;\n  line-height: 1.5;\n  color: ${styles.blue60};\n`\nconst OpenVisorContainer = styled.div`\n  float: right;\n`\nconst OpenVisorButton = styled(Button)`\n  border-radius: 15px;\n  float: right;\n`\nconst IconContainer = styled.div`\n  position: absolute;\n  right: 0;\n  padding-right: 8px;\n`\nconst OpenVisorIcon = styled(OpenPanelRight24)`\n  stroke: ${styles.ui01};\n  fill: ${styles.ui01};\n`\nconst LeftColumn = styled.div`\n  float: left;\n  width: 33%;\n  height: 100%;\n`\nconst MiddleColumn = styled.div`\n  float: left;\n  width: 33%;\n  height: 100%;\n`\nconst RightColumn = styled.div`\n  float: left;\n  width: 33%;\n  height: 100%;\n`\nconst ColumnHeading = styled.div`\n  display: flex;\n  padding: 16px 0;\n  /* text-align: center; */\n`\nconst ColumnLabel = styled.div`\n  font-size: x-large;\n  padding-top: 8px;\n  color: ${styles.blue60};\n  margin-left: 5px;\n`\nconst Row = styled.div`\n  padding-bottom: 16px;\n`\nconst Hightlight = styled.span`\n  background: ${styles.ui01};\n  border-radius: 15px;\n  padding: 0 5px;\n`\nconst SettingsIcon = styled(Settings32)`\n  fill: ${styles.blue40};\n  stroke-width: 2px;\n  stroke: ${styles.blue60};\n`\nfunction Loss({loss}) {\n  return <Hightlight>{loss === Constants.LOSS_NOT_SET ? 'not set' : loss.toPrecision(5)}</Hightlight>\n}\n\nexport default class Layout extends React.Component {\n  state = {\n    problemType: this.global.problemType\n  }\n\n  constructor() {\n    super();\n    this.handleOpenVisor = this.handleOpenVisor.bind(this);\n  }\n\n  render() {\n    return (\n      <Container>\n        <TitleContainer>\n          <Title>\n            Analyze Houses Data Set with TensorFlow.js\n          </Title>\n          <ProblemContainer id=\"select-problem-type\" labelText=\"\" disabled={this.global.trainingInprogress}\n            value={this.state.problemType}\n            onChange={(e) => this.handleProblemTypeChange(e)}>\n            <SelectItem text={'Predict the house price from the living space.'} value={ProblemType.HOUSE_PRICE}/>\n            <SelectItem text={'Predict whether or not a house has a water front.'} value={ProblemType.WATER_FRONT}/>\n            <SelectItem text={'Predict the number of bedrooms.'} value={ProblemType.BEDROOMS}/>\n          </ProblemContainer>\n        </TitleContainer>\n        <Body>\n          <BodyHeader>\n            <BodyHeaderItem float=\"left\">\n              Seconds: <Hightlight>{this.getTrainingTime()}</Hightlight>\n            </BodyHeaderItem>\n            <BodyHeaderItem float=\"left\">\n              Epochs: <Hightlight>{this.global.currentEpoch}</Hightlight>\n            </BodyHeaderItem>\n            <BodyHeaderItem float=\"left\">\n              Epoch loss: <Loss loss={this.global.currentTrainingLoss}></Loss>\n            </BodyHeaderItem>\n            <BodyHeaderItem float=\"left\">\n              Min loss: <Loss loss={this.global.minTrainingLoss}></Loss>\n            </BodyHeaderItem>\n            <OpenVisorContainer>\n              <OpenVisorButton small kind=\"primary\" onClick={this.handleOpenVisor}>\n                Open Visor\n                <IconContainer>\n                  <OpenVisorIcon aria-label=\"Open Visor\"/>\n                </IconContainer>\n              </OpenVisorButton>\n            </OpenVisorContainer>\n          </BodyHeader>\n          <div>\n            <LeftColumn>\n              <TrainAndPredict/>\n            </LeftColumn>\n            <MiddleColumn>\n              <ColumnHeading>\n                <SettingsIcon aria-label=\"Train and Test\"></SettingsIcon>\n                <ColumnLabel>Settings</ColumnLabel>\n              </ColumnHeading>\n              <Row>\n                <Settings/>\n              </Row>\n            </MiddleColumn>\n            <RightColumn>\n\n            </RightColumn>\n          </div>\n        </Body>\n      </Container>\n    );\n  }\n\n  getTrainingTime() {\n    return this.global.trainingElapsedTime/1000;\n  }\n\n  handleProblemTypeChange(e) {\n    const problemType = e.target.value;\n    this.setState({problemType});\n    Global.setProblemType(problemType);\n\n    Problem.change(problemType);\n\n    Data.setupProblem();\n  }\n\n  handleOpenVisor() {\n    tfvis.visor().open();\n  }\n}","import React from 'react';\nimport Layout from './components/jsx/Layout';\n\nfunction App() {\n  return (\n    <Layout></Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}